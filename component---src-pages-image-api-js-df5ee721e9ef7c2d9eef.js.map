{"version":3,"sources":["webpack:///component---src-pages-image-api-js-df5ee721e9ef7c2d9eef.js","webpack:///./src/pages/image-api.js"],"names":["webpackJsonp","./node_modules/babel-loader/lib/index.js?{\"plugins\":[\"/home/circleci/repo/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\",\"/home/circleci/repo/node_modules/babel-plugin-add-module-exports/lib/index.js\",\"/home/circleci/repo/node_modules/babel-plugin-transform-object-assign/lib/index.js\"],\"presets\":[[\"/home/circleci/repo/node_modules/babel-preset-env/lib/index.js\",{\"loose\":true,\"uglify\":true,\"modules\":\"commonjs\",\"targets\":{\"browsers\":[\"> 1%\",\"last 2 versions\",\"IE >= 9\"]},\"exclude\":[\"transform-regenerator\",\"transform-es2015-typeof-symbol\"]}],\"/home/circleci/repo/node_modules/babel-preset-stage-0/lib/index.js\",\"/home/circleci/repo/node_modules/babel-preset-react/lib/index.js\"],\"cacheDirectory\":true}!./src/pages/image-api.js","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","pageQuery","undefined","_react","_react2","_typography","props","assets","data","allContentfulAsset","edges","createElement","href","map","_ref","_ref$node","node","title","resize","alt","src","width","height","style","marginRight","rhythm","marginBottom","border","background","padding","dangerouslySetInnerHTML","__html","_ref2","_ref2$node","responsiveResolution","srcSet","_ref3","_ref3$node","resizing","_ref4","_ref4$node","responsiveSizes","sizes"],"mappings":"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","file":"component---src-pages-image-api-js-df5ee721e9ef7c2d9eef.js","sourcesContent":["webpackJsonp([16656974521434405000],{\n\n/***/ \"./node_modules/babel-loader/lib/index.js?{\\\"plugins\\\":[\\\"/home/circleci/repo/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\\\",\\\"/home/circleci/repo/node_modules/babel-plugin-add-module-exports/lib/index.js\\\",\\\"/home/circleci/repo/node_modules/babel-plugin-transform-object-assign/lib/index.js\\\"],\\\"presets\\\":[[\\\"/home/circleci/repo/node_modules/babel-preset-env/lib/index.js\\\",{\\\"loose\\\":true,\\\"uglify\\\":true,\\\"modules\\\":\\\"commonjs\\\",\\\"targets\\\":{\\\"browsers\\\":[\\\"> 1%\\\",\\\"last 2 versions\\\",\\\"IE >= 9\\\"]},\\\"exclude\\\":[\\\"transform-regenerator\\\",\\\"transform-es2015-typeof-symbol\\\"]}],\\\"/home/circleci/repo/node_modules/babel-preset-stage-0/lib/index.js\\\",\\\"/home/circleci/repo/node_modules/babel-preset-react/lib/index.js\\\"],\\\"cacheDirectory\\\":true}!./src/pages/image-api.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\texports.pageQuery = undefined;\n\t\n\tvar _react = __webpack_require__(\"./node_modules/react/react.js\");\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _typography = __webpack_require__(\"./src/utils/typography.js\");\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = function (props) {\n\t  var assets = props.data.allContentfulAsset.edges;\n\t  return _react2.default.createElement(\n\t    \"div\",\n\t    null,\n\t    _react2.default.createElement(\n\t      \"h1\",\n\t      null,\n\t      \"Image API examples\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"Gatsby offers rich integration with\",\n\t      \" \",\n\t      _react2.default.createElement(\n\t        \"a\",\n\t        { href: \"https://www.contentful.com/developers/docs/references/images-api/\" },\n\t        \"Contentful's Image API\"\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"Open Graph\",\n\t      _react2.default.createElement(\n\t        \"em\",\n\t        null,\n\t        \"i\"\n\t      ),\n\t      \"QL on your own site to experiment with the following options\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"h2\",\n\t      null,\n\t      \"Resize\"\n\t    ),\n\t    assets.map(function (_ref) {\n\t      var _ref$node = _ref.node,\n\t          title = _ref$node.title,\n\t          resize = _ref$node.resize;\n\t      return _react2.default.createElement(\"img\", {\n\t        alt: title,\n\t        src: resize.src,\n\t        width: resize.width,\n\t        height: resize.height,\n\t        style: {\n\t          marginRight: (0, _typography.rhythm)(1 / 2),\n\t          marginBottom: (0, _typography.rhythm)(1 / 2),\n\t          border: \"1px solid tomato\"\n\t        }\n\t      });\n\t    }),\n\t    _react2.default.createElement(\n\t      \"h4\",\n\t      null,\n\t      \"GraphQL query\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"pre\",\n\t      { style: { background: \"#efeded\", padding: (0, _typography.rhythm)(3 / 4) } },\n\t      _react2.default.createElement(\"code\", {\n\t        dangerouslySetInnerHTML: {\n\t          __html: \"{\\n  allContentfulAsset {\\n    edges {\\n      node {\\n        title\\n        resize(width: 100) {\\n          src\\n          width\\n          height\\n          aspectRatio\\n        }\\n      }\\n    }\\n  }\\n}\"\n\t        }\n\t      })\n\t    ),\n\t    _react2.default.createElement(\n\t      \"h2\",\n\t      null,\n\t      \"Responsive Resolution\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"If you make queries with \",\n\t      _react2.default.createElement(\n\t        \"code\",\n\t        null,\n\t        \"responsiveResolution\"\n\t      ),\n\t      \" then Gatsby automatically generates images with 1x, 1.5x, 2x, and 3x versions so your images look great on whatever screen resolution of device they're on.\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"If you're on a retina class screen, notice how much sharper these images are than the above \\\"resized\\\" images.\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"You should prefer this operator over \",\n\t      _react2.default.createElement(\n\t        \"code\",\n\t        null,\n\t        \"resize\"\n\t      ),\n\t      \".\"\n\t    ),\n\t    assets.map(function (_ref2) {\n\t      var _ref2$node = _ref2.node,\n\t          title = _ref2$node.title,\n\t          responsiveResolution = _ref2$node.responsiveResolution;\n\t      return _react2.default.createElement(\"img\", {\n\t        alt: title,\n\t        src: responsiveResolution.src,\n\t        srcSet: responsiveResolution.srcSet,\n\t        width: responsiveResolution.width,\n\t        height: responsiveResolution.height,\n\t        style: {\n\t          marginRight: (0, _typography.rhythm)(1 / 2),\n\t          marginBottom: (0, _typography.rhythm)(1 / 2),\n\t          border: \"1px solid tomato\"\n\t        }\n\t      });\n\t    }),\n\t    _react2.default.createElement(\n\t      \"h4\",\n\t      null,\n\t      \"GraphQL query\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"pre\",\n\t      { style: { background: \"#efeded\", padding: (0, _typography.rhythm)(3 / 4) } },\n\t      _react2.default.createElement(\"code\", {\n\t        dangerouslySetInnerHTML: {\n\t          __html: \"{\\n  allContentfulAsset {\\n    edges {\\n      node {\\n        title\\n        responsiveResolution(width: 100) {\\n          width\\n          height\\n          src\\n          srcSet\\n        }\\n      }\\n    }\\n  }\\n}\"\n\t        }\n\t      })\n\t    ),\n\t    _react2.default.createElement(\n\t      \"h2\",\n\t      null,\n\t      \"Resizing\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"On both resize and responsiveResolution you can also add a\",\n\t      \" \",\n\t      _react2.default.createElement(\n\t        \"code\",\n\t        null,\n\t        \"height\"\n\t      ),\n\t      \" \",\n\t      \"argument to the GraphQL argument to crop the image to a certain size.\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"You can also set the\",\n\t      \" \",\n\t      _react2.default.createElement(\n\t        \"a\",\n\t        { href: \"https://www.contentful.com/developers/docs/references/images-api/#/reference/resizing-&-cropping/change-the-resizing-behavior\" },\n\t        \"resizing behavior\"\n\t      ),\n\t      \" \",\n\t      \"and\",\n\t      \" \",\n\t      _react2.default.createElement(\n\t        \"a\",\n\t        { href: \"https://www.contentful.com/developers/docs/references/images-api/#/reference/resizing-&-cropping/specify-focus-area-for-resizing\" },\n\t        \"resizing focus area\"\n\t      )\n\t    ),\n\t    assets.map(function (_ref3) {\n\t      var _ref3$node = _ref3.node,\n\t          title = _ref3$node.title,\n\t          resizing = _ref3$node.resizing;\n\t      return _react2.default.createElement(\"img\", {\n\t        alt: title,\n\t        src: resizing.src,\n\t        srcSet: resizing.srcSet,\n\t        width: resizing.width,\n\t        height: resizing.height,\n\t        style: {\n\t          marginRight: (0, _typography.rhythm)(1 / 2),\n\t          marginBottom: (0, _typography.rhythm)(1 / 2),\n\t          border: \"1px solid tomato\"\n\t        }\n\t      });\n\t    }),\n\t    _react2.default.createElement(\n\t      \"h4\",\n\t      null,\n\t      \"GraphQL query\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"pre\",\n\t      { style: { background: \"#efeded\", padding: (0, _typography.rhythm)(3 / 4) } },\n\t      _react2.default.createElement(\"code\", {\n\t        dangerouslySetInnerHTML: {\n\t          __html: \"{\\n  allContentfulAsset {\\n    edges {\\n      node {\\n        title\\n        responsiveResolution(width: 100, height: 100) {\\n          width\\n          height\\n          src\\n          srcSet\\n        }\\n      }\\n    }\\n  }\\n}\"\n\t        }\n\t      })\n\t    ),\n\t    _react2.default.createElement(\n\t      \"h2\",\n\t      null,\n\t      \"Responsive Sizes\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"This GraphQL option allows you to generate responsive images that automatically respond to different device screen resolution and widths. E.g. a smartphone browser will download a much smaller image than a desktop device.\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"p\",\n\t      null,\n\t      \"Instead of specifying a width and height, with responsiveSizes you specify a \",\n\t      _react2.default.createElement(\n\t        \"code\",\n\t        null,\n\t        \"maxWidth\"\n\t      ),\n\t      \", the max width the container of the images reaches.\"\n\t    ),\n\t    assets.map(function (_ref4) {\n\t      var _ref4$node = _ref4.node,\n\t          title = _ref4$node.title,\n\t          responsiveSizes = _ref4$node.responsiveSizes;\n\t      return _react2.default.createElement(\"img\", {\n\t        alt: title,\n\t        src: responsiveSizes.src,\n\t        srcSet: responsiveSizes.srcSet,\n\t        sizes: responsiveSizes.sizes,\n\t        style: {\n\t          marginRight: (0, _typography.rhythm)(1 / 2),\n\t          marginBottom: (0, _typography.rhythm)(1 / 2),\n\t          border: \"1px solid tomato\"\n\t        }\n\t      });\n\t    }),\n\t    _react2.default.createElement(\n\t      \"h4\",\n\t      null,\n\t      \"GraphQL query\"\n\t    ),\n\t    _react2.default.createElement(\n\t      \"pre\",\n\t      { style: { background: \"#efeded\", padding: (0, _typography.rhythm)(3 / 4) } },\n\t      _react2.default.createElement(\"code\", {\n\t        dangerouslySetInnerHTML: {\n\t          __html: \"{\\n  allContentfulAsset {\\n    edges {\\n      node {\\n        title\\n        responsiveSizes(maxWidth: 613) {\\n          sizes\\n          src\\n          srcSet\\n        }\\n      }\\n    }\\n  }\\n}\"\n\t        }\n\t      })\n\t    )\n\t  );\n\t};\n\t\n\tvar pageQuery = exports.pageQuery = \"** extracted graphql fragment **\";\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-image-api-js-df5ee721e9ef7c2d9eef.js","import React from \"react\"\nimport { rhythm } from \"../utils/typography\"\n\nexport default props => {\n  const assets = props.data.allContentfulAsset.edges\n  return (\n    <div>\n      <h1>Image API examples</h1>\n      <p>\n        Gatsby offers rich integration with{` `}\n        <a href=\"https://www.contentful.com/developers/docs/references/images-api/\">\n          Contentful's Image API\n        </a>\n      </p>\n      <p>\n        Open Graph<em>i</em>QL on your own site to experiment with the following\n        options\n      </p>\n      <h2>Resize</h2>\n      {assets.map(({ node: { title, resize } }) =>\n        <img\n          alt={title}\n          src={resize.src}\n          width={resize.width}\n          height={resize.height}\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: rhythm(1 / 2),\n            border: `1px solid tomato`,\n          }}\n        />\n      )}\n      <h4>GraphQL query</h4>\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\n        <code\n          dangerouslySetInnerHTML={{\n            __html: `{\n  allContentfulAsset {\n    edges {\n      node {\n        title\n        resize(width: 100) {\n          src\n          width\n          height\n          aspectRatio\n        }\n      }\n    }\n  }\n}`,\n          }}\n        />\n      </pre>\n\n      <h2>Responsive Resolution</h2>\n      <p>\n        If you make queries with <code>responsiveResolution</code> then Gatsby\n        automatically generates images with 1x, 1.5x, 2x, and 3x versions so\n        your images look great on whatever screen resolution of device they're\n        on.\n      </p>\n      <p>\n        If you're on a retina class screen, notice how much sharper these images\n        are than the above \"resized\" images.\n      </p>\n      <p>\n        You should prefer this operator over <code>resize</code>.\n      </p>\n      {assets.map(({ node: { title, responsiveResolution } }) =>\n        <img\n          alt={title}\n          src={responsiveResolution.src}\n          srcSet={responsiveResolution.srcSet}\n          width={responsiveResolution.width}\n          height={responsiveResolution.height}\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: rhythm(1 / 2),\n            border: `1px solid tomato`,\n          }}\n        />\n      )}\n      <h4>GraphQL query</h4>\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\n        <code\n          dangerouslySetInnerHTML={{\n            __html: `{\n  allContentfulAsset {\n    edges {\n      node {\n        title\n        responsiveResolution(width: 100) {\n          width\n          height\n          src\n          srcSet\n        }\n      }\n    }\n  }\n}`,\n          }}\n        />\n      </pre>\n\n      <h2>Resizing</h2>\n      <p>\n        On both resize and responsiveResolution you can also add a{` `}\n        <code>height</code>\n        {` `}\n        argument to the GraphQL argument to crop the image to a certain size.\n      </p>\n      <p>\n        You can also set the{` `}\n        <a href=\"https://www.contentful.com/developers/docs/references/images-api/#/reference/resizing-&-cropping/change-the-resizing-behavior\">\n          resizing behavior\n        </a>\n        {` `}\n        and{` `}\n        <a href=\"https://www.contentful.com/developers/docs/references/images-api/#/reference/resizing-&-cropping/specify-focus-area-for-resizing\">\n          resizing focus area\n        </a>\n      </p>\n      {assets.map(({ node: { title, resizing } }) =>\n        <img\n          alt={title}\n          src={resizing.src}\n          srcSet={resizing.srcSet}\n          width={resizing.width}\n          height={resizing.height}\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: rhythm(1 / 2),\n            border: `1px solid tomato`,\n          }}\n        />\n      )}\n      <h4>GraphQL query</h4>\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\n        <code\n          dangerouslySetInnerHTML={{\n            __html: `{\n  allContentfulAsset {\n    edges {\n      node {\n        title\n        responsiveResolution(width: 100, height: 100) {\n          width\n          height\n          src\n          srcSet\n        }\n      }\n    }\n  }\n}`,\n          }}\n        />\n      </pre>\n\n      <h2>Responsive Sizes</h2>\n      <p>\n        This GraphQL option allows you to generate responsive images that\n        automatically respond to different device screen resolution and widths.\n        E.g. a smartphone browser will download a much smaller image than a\n        desktop device.\n      </p>\n      <p>\n        Instead of specifying a width and height, with responsiveSizes you\n        specify a <code>maxWidth</code>, the max width the container of the\n        images reaches.\n      </p>\n      {assets.map(({ node: { title, responsiveSizes } }) =>\n        <img\n          alt={title}\n          src={responsiveSizes.src}\n          srcSet={responsiveSizes.srcSet}\n          sizes={responsiveSizes.sizes}\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: rhythm(1 / 2),\n            border: `1px solid tomato`,\n          }}\n        />\n      )}\n      <h4>GraphQL query</h4>\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\n        <code\n          dangerouslySetInnerHTML={{\n            __html: `{\n  allContentfulAsset {\n    edges {\n      node {\n        title\n        responsiveSizes(maxWidth: 613) {\n          sizes\n          src\n          srcSet\n        }\n      }\n    }\n  }\n}`,\n          }}\n        />\n      </pre>\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query ImageAPIExamples {\n    allContentfulAsset(filter: { node_locale: { eq: \"en-US\" } }) {\n      edges {\n        node {\n          title\n          resize(width: 100) {\n            src\n            width\n            height\n            aspectRatio\n          }\n          responsiveResolution(width: 100) {\n            width\n            height\n            src\n            srcSet\n          }\n          resizing: responsiveResolution(width: 100, height: 100) {\n            width\n            height\n            src\n            srcSet\n          }\n          responsiveSizes(maxWidth: 613) {\n            sizes\n            src\n            srcSet\n          }\n        }\n      }\n    }\n  }\n`\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/image-api.js"],"sourceRoot":""}